/*
Copyright (c) 2015, Intel Corporation

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.
    * Neither the name of Intel Corporation nor the names of its
      contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*/


----------------------------------------
ISx is Scalable Integer Sort Application 
----------------------------------------

* ISx is a new scalable integer sort application designed for co-design 
  in the exascale era, scalable to large numbers of nodes.

* ISx belongs to the class of bucket sort algorithms which perform an 
  all-to-all communication pattern.

* ISx is inspired by the NAS Parallel Benchmark Integer Sort and its OpenSHMEM
  implementation of University of Houston. ISx addresses identified shortcomings 
  of the NPB IS.

* ISx is a highly modular application implemented in the OpenSHMEM parallel 
  programming model and supports both strong and weak scaling studies.

* ISx uses an uniform random key distribution and guarantees load balance.  

* ISx includes a verification stage.

* ISx is not a benchmark. It does not define fixed problems that can be used 
  to rank systems. Furthermore ISx has not been optimzed for the features 
  of any particular system.

* ISx has been presented at the PGAS 2015 conference 


References:
ISx, a Scalable Integer Sort for Co-design in the Exascale Era. 
Ulf Hanebutte and Jacob Hemstad. Proc. Ninth Conf. on Partitioned Global Address Space 
Programming Models (PGAS). Washington, DC. Oct 2015. http://hpcl.seas.gwu.edu/pgas15/

Information about the NAS Parallel Benchmarks may be found here:
https://www.nas.nasa.gov/publications/npb.html

The OpenSHMEM NAS Parallel Benchmarks 1.0a by the HPCTools Group University of Houston
can be downloaded at http://www.openshmem.org/site/Downloads/Examples


-------------------------------------------
Compiling and Executing the ISx Application
-------------------------------------------

Compile with 'make clean && make'. Makefile has debug and optimization profiles. 
Compile with -DDEBUG to enable all debug print statements (warning: there are a lot!). 
N.B. Debug mode restricts the problem size (see params.h)

Usage: ./isx <num_pes> <total_num_keys (strong) | keys_per_pe (weak)> <log_file>

The params.h file has various definitions that may be modified to change application options.

Usage: ./bin/isx.strong <num_pes> <total_num_keys>  <log_file>
       ./bin/isx.weak  <num_pes> <keys_per_pe> <log_file>
       ./bin/isx.weak_iso <num_pes> <keys_per_pe> <log_file>


example command lines (assuming aprun) for 2^27 keys (=134217728)

Strong:
 aprun -n 24 -N 4 ./bin/isx.strong 24 134217728 output_strong
Weak:
 aprun -n 24 -N 4 ./bin/isx.weak 24 134217728 output_weak
Weak_iso:
 Note that the iso-bucket width is specified in params.h
 aprun -n 24 -N 4 ./bin/isx.weak_iso 24 134217728 output_weak_iso

